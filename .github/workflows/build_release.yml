name: Build and Release

on:
  release:
    types: [created]  # Trigger when a new release is published

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Install dependencies
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libcurl4-openssl-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install curl || true  # CMake is already installed

      - name: Install dependencies (Windows - vcpkg)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=$PWD" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_TOOLCHAIN_FILE=$PWD\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:VCPKG_ROOT\vcpkg.exe install curl

      # 3. Configure CMake
      - name: Configure CMake
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}
          else
            cmake -S . -B build
          fi

      # 4. Build the project
      - name: Build
        run: cmake --build build --config Release

      # 5. Package artifacts
      - name: Package executable
        run: |
          mkdir -p release
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp build/Release/metar.exe release/metar-windows.exe
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cp build/metar release/metar-macos
          else
            cp build/metar release/metar-linux
          fi

      # 6. Upload to GitHub Release
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
